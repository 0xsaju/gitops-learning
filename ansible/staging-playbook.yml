# staging-playbook.yml
---
- name: Deploy Staging Environment with Docker
  hosts: staging
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Verify Docker is installed
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false

    - name: Display Docker version
      ansible.builtin.debug:
        var: docker_version.stdout

    - name: Verify Docker Compose is installed
      ansible.builtin.command: docker-compose --version
      register: docker_compose_version
      changed_when: false

    - name: Display Docker Compose version
      ansible.builtin.debug:
        var: docker_compose_version.stdout

    - name: Create staging application directory
      ansible.builtin.file:
        path: /home/ubuntu/staging-app
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
      become: yes

    - name: Template staging docker-compose.yml
      ansible.builtin.template:
        src: files/staging-docker-compose.yml.j2
        dest: /home/ubuntu/staging-app/docker-compose.yml
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      vars:
        staging_ip: "{{ staging_ip | default('localhost') }}"
      become: yes

    - name: Create staging environment file
      ansible.builtin.template:
        src: files/staging.env.j2
        dest: /home/ubuntu/staging-app/.env
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      vars:
        staging_ip: "{{ staging_ip | default('localhost') }}"
      become: yes

    - name: Pull latest Docker images
      ansible.builtin.shell: |
        docker pull 0xsaju/flask-user-service:staging
        docker pull 0xsaju/flask-product-service:staging
        docker pull 0xsaju/flask-order-service:staging
        docker pull 0xsaju/flask-frontend:staging
      args:
        chdir: /home/ubuntu/staging-app
      become: no

    - name: Verify Docker images are available
      ansible.builtin.shell: |
        echo "Available Docker images:"
        docker images | grep 0xsaju
        echo "Checking if required images exist..."
        docker images 0xsaju/flask-user-service:staging
        docker images 0xsaju/flask-product-service:staging
        docker images 0xsaju/flask-order-service:staging
        docker images 0xsaju/flask-frontend:staging
      args:
        chdir: /home/ubuntu/staging-app
      register: docker_images
      become: no

    - name: Display Docker images status
      ansible.builtin.debug:
        var: docker_images.stdout_lines

    - name: Start Staging Docker Compose stack
      ansible.builtin.shell: |
        /usr/local/bin/docker-compose -f /home/ubuntu/staging-app/docker-compose.yml up -d
      args:
        chdir: /home/ubuntu/staging-app
      become: no

    - name: Wait for Docker services to start
      ansible.builtin.shell: |
        echo "Waiting for Docker services to initialize..."
        sleep 10
        echo "Checking Docker status..."
        docker ps
        echo "Checking Docker Compose status..."
        docker-compose ps
        echo "Checking Docker logs..."
        docker-compose logs --tail=20
      args:
        chdir: /home/ubuntu/staging-app
      register: docker_status
      become: no

    - name: Display Docker status
      ansible.builtin.debug:
        var: docker_status.stdout_lines

    - name: Wait additional time for services to be ready
      ansible.builtin.pause:
        seconds: 30

    - name: Wait for staging frontend to be up
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:8080"
        status_code: 200
        timeout: 30
        follow_redirects: all
      register: staging_frontend_status
      retries: 6
      delay: 10
      until: staging_frontend_status.status == 200
      ignore_errors: yes

    - name: Wait for staging user service to be up
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:5001/api/users"
        status_code: 200
        timeout: 30
      register: staging_user_status
      retries: 6
      delay: 10
      until: staging_user_status.status == 200
      ignore_errors: yes

    - name: Wait for staging product service to be up
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:5002/api/products"
        status_code: 200
        timeout: 30
      register: staging_product_status
      retries: 6
      delay: 10
      until: staging_product_status.status == 200
      ignore_errors: yes

    - name: Wait for staging order service to be up
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:5003/api/orders"
        status_code: 200
        timeout: 30
      register: staging_order_status
      retries: 6
      delay: 10
      until: staging_order_status.status == 200
      ignore_errors: yes

    - name: Check service status
      ansible.builtin.debug:
        msg: |
          Frontend Status: {{ staging_frontend_status.status | default('Not responding') }}
          User Service Status: {{ staging_user_status.status | default('Not responding') }}
          Product Service Status: {{ staging_product_status.status | default('Not responding') }}
          Order Service Status: {{ staging_order_status.status | default('Not responding') }}

    - name: Display staging deployment info
      ansible.builtin.debug:
        msg: |
          Staging deployment completed successfully!
          Frontend: http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:8080
          User Service: http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:5001
          Product Service: http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:5002
          Order Service: http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:5003