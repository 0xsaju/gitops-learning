version: '3.8'

services:
  user-api:
    container_name: production_user_service
    image: 0xsaju/flask-user-service:production
    ports:
      - "5001:5001"
    environment:
      - CONFIGURATION_SETUP=config.ProductionConfig
      - DB_HOST=user-db
      - DB_PORT=3306
      - DB_USER=dbuser
      - DB_PASSWORD=testpass123
      - DB_NAME=user_management
      - LOG_LEVEL=INFO
    depends_on:
      - user-db
    networks:
      - production_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  user-db:
    container_name: production_user_dbase
    image: mysql:8
    ports:
      - "32000:3306"
    environment:
      MYSQL_ROOT_PASSWORD: R00tD$bP@ssW0rd
      MYSQL_DATABASE: user_management
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: testpass123
    networks:
      - production_network
    volumes:
      - production_userdb_vol:/var/lib/mysql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  product-api:
    container_name: production_product_service
    image: 0xsaju/flask-product-service:production
    ports:
      - "5002:5002"
    environment:
      - CONFIGURATION_SETUP=config.ProductionConfig
      - DB_HOST=product-db
      - DB_PORT=3306
      - DB_USER=dbuser
      - DB_PASSWORD=testpass123
      - DB_NAME=product_catalog
      - LOG_LEVEL=INFO
    depends_on:
      - product-db
    networks:
      - production_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  product-db:
    container_name: production_product_dbase
    image: mysql:8
    ports:
      - "32001:3306"
    environment:
      MYSQL_ROOT_PASSWORD: R00tD$bP@ssW0rd
      MYSQL_DATABASE: product_catalog
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: testpass123
    networks:
      - production_network
    volumes:
      - production_productdb_vol:/var/lib/mysql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  order-api:
    container_name: production_order_service
    image: 0xsaju/flask-order-service:production
    ports:
      - "5003:5003"
    environment:
      - CONFIGURATION_SETUP=config.ProductionConfig
      - DB_HOST=order-db
      - DB_PORT=3306
      - DB_USER=dbuser
      - DB_PASSWORD=testpass123
      - DB_NAME=order_management
      - LOG_LEVEL=INFO
    depends_on:
      - order-db
    networks:
      - production_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  order-db:
    container_name: production_order_dbase
    image: mysql:8
    ports:
      - "32002:3306"
    environment:
      MYSQL_ROOT_PASSWORD: R00tD$bP@ssW0rd
      MYSQL_DATABASE: order_management
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: testpass123
    networks:
      - production_network
    volumes:
      - production_orderdb_vol:/var/lib/mysql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend-app:
    container_name: production_frontend_app
    image: 0xsaju/flask-frontend:production
    ports:
      - "8080:5000"
    environment:
      - CONFIGURATION_SETUP=config.ProductionConfig
      - USER_SERVICE_URL=http://user-api:5001
      - PRODUCT_SERVICE_URL=http://product-api:5002
      - ORDER_SERVICE_URL=http://order-api:5003
      - LOG_LEVEL=INFO
    networks:
      - production_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  watchtower:
    container_name: production_watchtower
    image: containrrr/watchtower
    environment:
      - WATCHTOWER_POLL_INTERVAL=60
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=watchtower@example.com
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=admin@example.com
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - production_network
    restart: always

  nginx:
    container_name: production_nginx
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend-app
      - user-api
      - product-api
      - order-api
    networks:
      - production_network
    restart: always

volumes:
  production_userdb_vol:
  production_productdb_vol:
  production_orderdb_vol:

networks:
  production_network:
    driver: bridge 