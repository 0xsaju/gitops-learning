---
- hosts: production
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
    docker_compose_version: "2.24.7"
  tasks:
    - name: Install required apt packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - git
          - htop
          - tree
          - fail2ban
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Install MySQL client
      apt:
        name: mysql-client-core-8.0
        state: present
        update_cache: yes

    - name: Install pip3
      apt:
        name: python3-pip
        state: present

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Add user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Create production application directory
      file:
        path: /home/ubuntu/production-app
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Get VM public IP from Terraform
      command: terraform -chdir=../infra output -raw instance_public_ip
      register: production_vm_ip
      delegate_to: localhost
      become: false

    - name: Template production docker-compose.yml
      template:
        src: files/production-docker-compose.yml.j2
        dest: /home/ubuntu/production-app/docker-compose.yml
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      vars:
        production_ip: "{{ production_vm_ip.stdout }}"

    - name: Create production environment file
      template:
        src: files/production.env.j2
        dest: /home/ubuntu/production-app/.env
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      vars:
        production_ip: "{{ production_vm_ip.stdout }}"

    - name: Configure fail2ban for SSH protection
      template:
        src: files/jail.local.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0644'

    - name: Start and enable fail2ban
      systemd:
        name: fail2ban
        state: started
        enabled: yes

    - name: Pull latest Docker images
      shell: |
        docker pull 0xsaju/flask-user-service:production
        docker pull 0xsaju/flask-product-service:production
        docker pull 0xsaju/flask-order-service:production
        docker pull 0xsaju/flask-frontend:production
      args:
        chdir: /home/ubuntu/production-app

    - name: Start Production Docker Compose stack
      shell: |
        /usr/local/bin/docker-compose -f /home/ubuntu/production-app/docker-compose.yml up -d
      args:
        chdir: /home/ubuntu/production-app

    - name: Wait for production frontend to be up
      uri:
        url: http://localhost:8080
        status_code: 200
      register: production_frontend_status
      retries: 20
      delay: 15
      until: production_frontend_status.status == 200

    - name: Wait for production user service to be up
      uri:
        url: http://localhost:5001/api/users
        status_code: 200
      register: production_user_status
      retries: 20
      delay: 15
      until: production_user_status.status == 200

    - name: Wait for production product service to be up
      uri:
        url: http://localhost:5002/api/products
        status_code: 200
      register: production_product_status
      retries: 20
      delay: 15
      until: production_product_status.status == 200

    - name: Wait for production order service to be up
      uri:
        url: http://localhost:5003/api/orders
        status_code: 200
      register: production_order_status
      retries: 20
      delay: 15
      until: production_order_status.status == 200

    - name: Setup log rotation for Docker containers
      template:
        src: files/docker-logrotate.j2
        dest: /etc/logrotate.d/docker-containers
        owner: root
        group: root
        mode: '0644'

    - name: Create monitoring script
      template:
        src: files/monitor-services.sh.j2
        dest: /home/ubuntu/monitor-services.sh
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Setup cron job for monitoring
      cron:
        name: "Monitor Flask services"
        minute: "*/5"
        job: "/home/ubuntu/monitor-services.sh"
        user: ubuntu

    - name: Display production deployment info
      debug:
        msg: |
          Production deployment completed successfully!
          Frontend: http://{{ production_vm_ip.stdout }}:8080
          User Service: http://{{ production_vm_ip.stdout }}:5001
          Product Service: http://{{ production_vm_ip.stdout }}:5002
          Order Service: http://{{ production_vm_ip.stdout }}:5003 