name: Simple EC2 Deployment

on:
  push:
    branches: [ staging, production ]
  pull_request:
    branches: [ staging, production ]

env:
  DOCKER_REGISTRY: 0xsaju

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "docker_tag=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "docker_tag=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "docker_tag=staging" >> $GITHUB_OUTPUT
          fi

      - name: Build and push User Service
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-user-service:${{ steps.env.outputs.docker_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-frontend:${{ steps.env.outputs.docker_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production'
    outputs:
      server_ip: ${{ steps.get-ip.outputs.server_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        run: |
          cd infra
          terraform init -backend-config="bucket=gitops-learning-terraform-state-1753768527" -backend-config="key=${{ steps.env.outputs.environment }}/terraform.tfstate" -backend-config="region=ap-southeast-1" -backend-config="dynamodb_table=terraform-state-lock-new" -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -var-file="environments/${{ steps.env.outputs.environment }}.tfvars" -out="${{ steps.env.outputs.environment }}.plan"

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply "${{ steps.env.outputs.environment }}.plan"

      - name: Get server IP
        id: get-ip
        run: |
          cd infra
          SERVER_IP=$(terraform output -raw instance_public_ip)
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          echo "âœ… Server IP: $SERVER_IP"

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/gitops-key
          chmod 600 ~/.ssh/gitops-key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/gitops-key

      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Wait for Server to Be Ready
        run: |
          echo "Waiting for server to be ready..."
          sleep 30

      - name: Test SSH Connectivity
        run: |
          SERVER_IP="${{ needs.deploy-infrastructure.outputs.server_ip }}"
          echo "Testing SSH connectivity to $SERVER_IP..."
          
          for i in {1..6}; do
            echo "Attempt $i of 6..."
            if timeout 60 ssh -i ~/.ssh/gitops-key -o ConnectTimeout=60 -o StrictHostKeyChecking=no ec2-user@$SERVER_IP "echo 'SSH connection successful'"; then
              echo "âœ… SSH connection successful!"
              break
            else
              echo "Attempt $i failed, waiting 10 seconds..."
              sleep 10
            fi
          done

      - name: Deploy Application
        run: |
          SERVER_IP="${{ needs.deploy-infrastructure.outputs.server_ip }}"
          echo "Deploying to server IP: $SERVER_IP"
          
          # Create app directory
          ssh -i ~/.ssh/gitops-key -o StrictHostKeyChecking=no ec2-user@$SERVER_IP "mkdir -p /home/ec2-user/app"
          
          # Copy Docker Compose file
          scp -i ~/.ssh/gitops-key -o StrictHostKeyChecking=no docker-compose.yml ec2-user@$SERVER_IP:/home/ec2-user/app/
          
          # Copy environment file
          scp -i ~/.ssh/gitops-key -o StrictHostKeyChecking=no env.example ec2-user@$SERVER_IP:/home/ec2-user/app/.env
          
          # Deploy with Docker Compose
          ssh -i ~/.ssh/gitops-key -o StrictHostKeyChecking=no ec2-user@$SERVER_IP << 'EOF'
            cd /home/ec2-user/app
            
            # Stop existing containers
            echo "Stopping existing containers..."
            docker-compose down || true
            
            # Clean up old containers and images
            echo "Cleaning up old containers and images..."
            docker container prune -f
            docker image prune -f
            docker volume prune -f
            
            # Pull latest images
            echo "Pulling latest images..."
            docker-compose pull
            
            # Start services
            echo "Starting services..."
            docker-compose up -d
            
            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            sleep 30
            
            # Check service status
            echo "Checking service status..."
            docker-compose ps
          EOF

  health-check:
    needs: deploy-application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production'
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Health check
        run: |
          SERVER_IP="${{ needs.deploy-infrastructure.outputs.server_ip }}"
          echo "Testing ${{ steps.env.outputs.environment }} deployment on $SERVER_IP..."
          
          # Wait for services to be ready
          echo "Waiting 60 seconds for services to start..."
          sleep 60
          
          # Test user service
          echo "Testing user service on http://$SERVER_IP:5001/health"
          curl -f --connect-timeout 10 http://$SERVER_IP:5001/health || exit 1
          
          # Test frontend
          echo "Testing frontend on http://$SERVER_IP:8080/"
          curl -f --connect-timeout 10 http://$SERVER_IP:8080/ || exit 1
          
          echo "All ${{ steps.env.outputs.environment }} services are healthy!"

      - name: Notify deployment success
        run: |
          echo "ðŸŽ‰ ${{ steps.env.outputs.environment }} deployment successful!"
          echo "Frontend: http://${{ needs.deploy-infrastructure.outputs.server_ip }}:8080"
          echo "User Service: http://${{ needs.deploy-infrastructure.outputs.server_ip }}:5001" 