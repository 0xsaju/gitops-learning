name: Build and Deploy to Staging

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

env:
  DOCKER_REGISTRY: 0xsaju
  STAGING_TAG: staging

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push User Service
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-user-service:${{ env.STAGING_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Product Service
        uses: docker/build-push-action@v5
        with:
          context: ./product-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-product-service:${{ env.STAGING_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Order Service
        uses: docker/build-push-action@v5
        with:
          context: ./order-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-order-service:${{ env.STAGING_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-frontend:${{ env.STAGING_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Terraform Init - Staging
        run: |
          cd infra
          terraform init

      - name: Terraform Plan - Staging
        run: |
          cd infra
          terraform plan -var-file=staging.tfvars -out=staging.plan

      - name: Terraform Apply - Staging
        run: |
          cd infra
          terraform apply staging.plan

      - name: Get staging server IP
        id: get-ip
        run: |
          cd infra
          STAGING_IP=$(terraform output -raw staging_vm_public_ip)
          echo "staging_ip=$STAGING_IP" >> $GITHUB_OUTPUT

      - name: Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Deploy to staging server
        run: |
          cd ansible
          ansible-playbook -i staging-inventory staging-playbook.yml --extra-vars "staging_ip=${{ steps.get-ip.outputs.staging_ip }}"

      - name: Health check staging deployment
        run: |
          STAGING_IP="${{ steps.get-ip.outputs.staging_ip }}"
          echo "Testing staging deployment..."
          
          # Wait for services to be ready
          sleep 30
          
          # Test frontend
          curl -f http://$STAGING_IP:8080 || exit 1
          
          # Test user service
          curl -f http://$STAGING_IP:5001/api/users || exit 1
          
          # Test product service
          curl -f http://$STAGING_IP:5002/api/products || exit 1
          
          # Test order service
          curl -f http://$STAGING_IP:5003/api/orders || exit 1
          
          echo "All staging services are healthy!"

      - name: Notify staging deployment success
        run: |
          echo "ðŸŽ‰ Staging deployment successful!"
          echo "Frontend: http://${{ steps.get-ip.outputs.staging_ip }}:8080"
          echo "User Service: http://${{ steps.get-ip.outputs.staging_ip }}:5001"
          echo "Product Service: http://${{ steps.get-ip.outputs.staging_ip }}:5002"
          echo "Order Service: http://${{ steps.get-ip.outputs.staging_ip }}:5003" 