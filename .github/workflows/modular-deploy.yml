name: Modular Terraform Deployment

on:
  push:
    branches: [ staging, production ]
  pull_request:
    branches: [ staging, production ]

env:
  DOCKER_REGISTRY: 0xsaju

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "docker_tag=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "docker_tag=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "docker_tag=staging" >> $GITHUB_OUTPUT
          fi

      - name: Build and push User Service
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-user-service:${{ steps.env.outputs.docker_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Product Service
        uses: docker/build-push-action@v5
        with:
          context: ./product-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-product-service:${{ steps.env.outputs.docker_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Order Service
        uses: docker/build-push-action@v5
        with:
          context: ./order-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-order-service:${{ steps.env.outputs.docker_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/flask-frontend:${{ steps.env.outputs.docker_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production'
    outputs:
      server_ip: ${{ steps.get-ip.outputs.server_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        run: |
          cd infra
          terraform init -backend-config="bucket=gitops-learning-terraform-state-1753768527" -backend-config="key=${{ steps.env.outputs.environment }}/terraform.tfstate" -backend-config="region=ap-southeast-1" -backend-config="dynamodb_table=terraform-state-lock-new" -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -var-file="environments/${{ steps.env.outputs.environment }}.tfvars" -out="${{ steps.env.outputs.environment }}.plan"

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply "${{ steps.env.outputs.environment }}.plan"
          
      - name: Validate Terraform State
        run: |
          cd infra
          echo "Validating Terraform state after apply..."
          terraform state list
          echo ""
          echo "Checking for required outputs..."
          terraform output instance_public_ip || echo "Warning: instance_public_ip output not found"
          terraform output instance_id || echo "Warning: instance_id output not found"

      - name: Get server IP
        id: get-ip
        run: |
          cd infra
          echo "Available Terraform outputs:"
          terraform output
          echo ""
          echo "Getting instance public IP..."
          
          # Try to get the IP with better error handling
          if ! SERVER_IP=$(terraform output -raw instance_public_ip 2>/dev/null); then
            echo "Error: Failed to get instance_public_ip output"
            echo "Checking if instance exists..."
            terraform state list | grep aws_instance || echo "No instances found in state"
            exit 1
          fi
          
          echo "Server IP: $SERVER_IP"
          if [ -z "$SERVER_IP" ] || [ "$SERVER_IP" = "null" ]; then
            echo "Error: Server IP is empty or null!"
            echo "This might indicate the instance hasn't been created yet or has no public IP"
            exit 1
          fi
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          echo "‚úÖ Server IP set to: $SERVER_IP"

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Setup Ansible and SSH Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/gitops-key
          chmod 600 ~/.ssh/gitops-key
          
          # Add key to SSH agent
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/gitops-key

      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Wait for Server to Be Ready
        run: |
          echo "Waiting for server to be ready..."
          sleep 30
          
      - name: Generate Dynamic Inventory
        run: |
          cd ansible
          echo "üîç DEBUG: Received server_ip from previous job: '${{ needs.deploy-infrastructure.outputs.server_ip }}'"
          echo "Generating inventory for IP: ${{ needs.deploy-infrastructure.outputs.server_ip }}"
          sed "s/{{ staging_ip }}/${{ needs.deploy-infrastructure.outputs.server_ip }}/g" staging-inventory-template > staging-inventory-dynamic
          cat staging-inventory-dynamic
          
      - name: Test SSH Connectivity
        run: |
          echo "üîç DEBUG: Server IP for SSH test: '${{ needs.deploy-infrastructure.outputs.server_ip }}'"
          if [ -z "${{ needs.deploy-infrastructure.outputs.server_ip }}" ]; then
            echo "‚ùå ERROR: Server IP is empty! Cannot test SSH connectivity."
            exit 1
          fi
          echo "Testing SSH connectivity to ${{ needs.deploy-infrastructure.outputs.server_ip }}..."
          
          # Create comprehensive SSH config
          mkdir -p ~/.ssh
          cat > ~/.ssh/config << EOF
          Host ${{ needs.deploy-infrastructure.outputs.server_ip }}
            HostName ${{ needs.deploy-infrastructure.outputs.server_ip }}
            User ubuntu
            PubkeyAuthentication yes
            PasswordAuthentication no
            PreferredAuthentications password
            StrictHostKeyChecking no
            ConnectTimeout 10
            IdentitiesOnly yes
            IdentityFile /dev/null
            KbdInteractiveAuthentication no
            GSSAPIAuthentication no
          EOF
          chmod 600 ~/.ssh/config
          
          # Test SSH with explicit flags and better error handling
          echo "Attempting SSH connection with key authentication..."
          
          # First, let's test if the key file exists and has correct permissions
          echo "Checking SSH key file..."
          ls -la ~/.ssh/gitops-key
          echo "SSH key fingerprint:"
          ssh-keygen -lf ~/.ssh/gitops-key || echo "Could not get fingerprint"
          
          for i in {1..6}; do
            echo "Attempt $i of 6..."
            if timeout 60 ssh -i ~/.ssh/gitops-key -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o PreferredAuthentications=publickey -o IdentitiesOnly=yes -o KbdInteractiveAuthentication=no -o GSSAPIAuthentication=no -o ConnectTimeout=60 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -v ubuntu@${{ needs.deploy-infrastructure.outputs.server_ip }} "echo 'SSH connection successful' && exit 0" 2>&1; then
              echo "‚úÖ SSH connection successful!"
              break
            else
              echo "Attempt $i failed, waiting 10 seconds..."
              sleep 10
            fi
          done
          
          # Final test
          if ! timeout 60 ssh -i ~/.ssh/gitops-key -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o PreferredAuthentications=publickey -o IdentitiesOnly=yes -o KbdInteractiveAuthentication=no -o GSSAPIAuthentication=no -o ConnectTimeout=60 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ubuntu@${{ needs.deploy-infrastructure.outputs.server_ip }} "echo 'Final SSH test successful'"; then
            echo "‚ùå SSH connection failed after all attempts"
            echo "Debugging SSH configuration..."
            ssh -i ~/.ssh/gitops-key -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o PreferredAuthentications=publickey -o IdentitiesOnly=yes -o KbdInteractiveAuthentication=no -o GSSAPIAuthentication=no -o ConnectTimeout=60 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -v ubuntu@${{ needs.deploy-infrastructure.outputs.server_ip }} "echo 'Debug test'" || true
            exit 1
          fi
          
      - name: Deploy with Ansible
        run: |
          cd ansible
          echo "Deploying to server IP: ${{ needs.deploy-infrastructure.outputs.server_ip }}"
          
          # Create comprehensive Ansible SSH config
          mkdir -p ~/.ssh
          cat > ~/.ssh/config << EOF
          Host ${{ needs.deploy-infrastructure.outputs.server_ip }}
            HostName ${{ needs.deploy-infrastructure.outputs.server_ip }}
            User ubuntu
            PubkeyAuthentication yes
            PasswordAuthentication no
            PreferredAuthentications password
            StrictHostKeyChecking no
            ConnectTimeout 10
            IdentitiesOnly yes
            IdentityFile /dev/null
            KbdInteractiveAuthentication no
            GSSAPIAuthentication no
          EOF
          chmod 600 ~/.ssh/config
          
          ansible-playbook -i "staging-inventory-dynamic" "staging-playbook.yml" --extra-vars "staging_ip=${{ needs.deploy-infrastructure.outputs.server_ip }}" --ssh-common-args='-o StrictHostKeyChecking=no -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o PreferredAuthentications=publickey -o IdentitiesOnly=yes -o KbdInteractiveAuthentication=no -o GSSAPIAuthentication=no -o ConnectTimeout=60 -o ServerAliveInterval=60 -o ServerAliveCountMax=3'

  health-check:
    needs: deploy-application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production'
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/production' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Health check
        run: |
          SERVER_IP="${{ needs.deploy-infrastructure.outputs.server_ip }}"
          echo "Server IP from previous job: $SERVER_IP"
          
          if [ -z "$SERVER_IP" ]; then
            echo "Error: SERVER_IP is empty! Cannot perform health checks."
            echo "This might indicate a problem with the Terraform deployment."
            exit 1
          fi
          
          echo "Testing ${{ steps.env.outputs.environment }} deployment on $SERVER_IP..."
          
          # Wait for services to be ready
          echo "Waiting 60 seconds for services to start..."
          sleep 60
          
          # Test frontend
          echo "Testing frontend on http://$SERVER_IP:8080"
          curl -f http://$SERVER_IP:8080 || exit 1
          
          # Test user service
          echo "Testing user service on http://$SERVER_IP:5001/api/users"
          curl -f http://$SERVER_IP:5001/api/users || exit 1
          
          # Test product service
          echo "Testing product service on http://$SERVER_IP:5002/api/products"
          curl -f http://$SERVER_IP:5002/api/products || exit 1
          
          # Test order service
          echo "Testing order service on http://$SERVER_IP:5003/api/orders"
          curl -f http://$SERVER_IP:5003/api/orders || exit 1
          
          echo "All ${{ steps.env.outputs.environment }} services are healthy!"

      - name: Notify deployment success
        run: |
          echo "üéâ ${{ steps.env.outputs.environment }} deployment successful!"
          echo "Frontend: http://${{ needs.deploy-infrastructure.outputs.server_ip }}:8080"
          echo "User Service: http://${{ needs.deploy-infrastructure.outputs.server_ip }}:5001"
          echo "Product Service: http://${{ needs.deploy-infrastructure.outputs.server_ip }}:5002"
          echo "Order Service: http://${{ needs.deploy-infrastructure.outputs.server_ip }}:5003" 