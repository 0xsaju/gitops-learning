name: Test GitHub Secrets

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/test-secrets.yml'

jobs:
  test-aws-credentials:
    name: Test AWS Credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Test AWS identity
        run: |
          echo "Testing AWS credentials..."
          aws sts get-caller-identity
          echo "âœ… AWS credentials are working!"

      - name: Test AWS region access
        run: |
          echo "Testing AWS region access..."
          aws ec2 describe-regions --region-names ap-southeast-1
          echo "âœ… AWS region access is working!"

  test-docker-hub:
    name: Test Docker Hub Credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Test Docker Hub access
        run: |
          echo "Testing Docker Hub access..."
          docker pull hello-world
          docker run hello-world
          echo "âœ… Docker Hub credentials are working!"

  test-terraform:
    name: Test Terraform Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Test Terraform validation
        run: |
          cd infra
          echo "Testing Terraform configuration..."
          terraform init
          terraform validate
          echo "âœ… Terraform configuration is valid!"

      - name: Test staging plan
        run: |
          cd infra
          echo "Testing staging plan..."
          terraform plan -var-file="environments/staging.tfvars" -detailed-exitcode
          echo "âœ… Staging plan is working!"

      - name: Test production plan
        run: |
          cd infra
          echo "Testing production plan..."
          terraform plan -var-file="environments/production.tfvars" -detailed-exitcode
          echo "âœ… Production plan is working!"

  test-ansible:
    name: Test Ansible Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Test Ansible syntax
        run: |
          cd ansible
          echo "Testing Ansible playbook syntax..."
          ansible-playbook --syntax-check staging-playbook.yml
          ansible-playbook --syntax-check production-playbook.yml
          echo "âœ… Ansible playbooks are syntactically correct!"

  success:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [test-aws-credentials, test-docker-hub, test-terraform, test-ansible]
    steps:
      - name: Success message
        run: |
          echo "ðŸŽ‰ All GitHub Secrets and configurations are working correctly!"
          echo "âœ… AWS Credentials: Working"
          echo "âœ… Docker Hub Credentials: Working"
          echo "âœ… Terraform Configuration: Valid"
          echo "âœ… Ansible Playbooks: Valid"
          echo ""
          echo "ðŸš€ Ready for deployment!"
          echo "Next steps:"
          echo "1. Create staging branch: git checkout -b staging"
          echo "2. Push to trigger deployment: git push origin staging"
          echo "3. Monitor deployment in GitHub Actions tab" 