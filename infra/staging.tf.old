provider "aws" {
  region = "ap-southeast-1"
}

resource "aws_vpc" "staging" {
  cidr_block = "10.1.0.0/16"
  
  tags = {
    Name = "staging-vpc"
    Environment = "staging"
  }
}

resource "aws_subnet" "staging" {
  vpc_id     = aws_vpc.staging.id
  cidr_block = "10.1.1.0/24"
  
  tags = {
    Name = "staging-subnet"
    Environment = "staging"
  }
}

resource "aws_internet_gateway" "staging" {
  vpc_id = aws_vpc.staging.id
  
  tags = {
    Name = "staging-igw"
    Environment = "staging"
  }
}

resource "aws_route_table" "staging_public" {
  vpc_id = aws_vpc.staging.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.staging.id
  }
  
  tags = {
    Name = "staging-public-rt"
    Environment = "staging"
  }
}

resource "aws_route_table_association" "staging_public" {
  subnet_id      = aws_subnet.staging.id
  route_table_id = aws_route_table.staging_public.id
}

resource "aws_security_group" "staging" {
  vpc_id = aws_vpc.staging.id
  name   = "staging-security-group"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "SSH"
  }
  
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTP"
  }
  
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTPS"
  }
  
  # Flask microservices ports
  ingress {
    from_port   = 5001
    to_port     = 5003
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Flask Microservices"
  }
  
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Frontend"
  }
  
  # Database ports
  ingress {
    from_port   = 32000
    to_port     = 32002
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "MySQL Databases"
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "All outbound traffic"
  }
  
  tags = {
    Name = "staging-security-group"
    Environment = "staging"
  }
}

resource "aws_instance" "staging" {
  ami           = "ami-0fa377108253bf620" # Ubuntu 22.04 LTS in ap-southeast-1
  instance_type = "t3.micro"
  subnet_id     = aws_subnet.staging.id
  vpc_security_group_ids = [aws_security_group.staging.id]
  associate_public_ip_address = true

  user_data = <<-EOF
              #!/bin/bash
              # Set password and SSH key
              echo 'ubuntu:Ubuntu2024!' | chpasswd
              sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
              mkdir -p /home/ubuntu/.ssh
              echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3EXAMPLEKEYHERE user@host' >> /home/ubuntu/.ssh/authorized_keys
              chown -R ubuntu:ubuntu /home/ubuntu/.ssh
              chmod 700 /home/ubuntu/.ssh
              chmod 600 /home/ubuntu/.ssh/authorized_keys
              systemctl restart sshd
              
              # Install Docker and Docker Compose
              apt-get update
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
              apt-get update
              apt-get install -y docker.io
              usermod -aG docker ubuntu
              
              # Install Docker Compose
              curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              EOF

  tags = {
    Name = "staging-flask-microservices"
    Environment = "staging"
  }
}

output "staging_vm_public_ip" {
  value = aws_instance.staging.public_ip
  description = "Public IP of staging server"
}

output "staging_vm_private_ip" {
  value = aws_instance.staging.private_ip
  description = "Private IP of staging server"
} 